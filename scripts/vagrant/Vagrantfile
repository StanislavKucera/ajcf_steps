# -*- mode: ruby -*-
# vi: set ft=ruby :

# common vagrant commands:
# create initial vagrantfile : vagrant init
# add a vagrant box : vagrant box add hashicorp/bionic64
# create/start the vm : vagrant up
# log in to the running vm : vagrant ssh
# restart the vm and re-execute provisioning scripts : vagrant reload --provision
# stop the vm : vagrant halt

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "hashicorp/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant", disabled: true
  # config.vm.synced_folder "../..", "/host_sources"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo running as `whoami`

    sudo apt-get update

    sudo apt-get -y install software-properties-common gnupg rsync zip openssh-server make sudo git curl unzip tar

    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    sudo apt-get install -y g++ g++-9 gdb
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9

    sudo apt-get install -y clang-9 lldb-9 lld-9
    sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 90 --slave /usr/bin/clang++ clang++ /usr/bin/clang++-9

    mkdir -p $HOME/DEV
    cd $HOME/DEV

    curl -L -o cmake-3.16.4.tar.gz https://github.com/Kitware/CMake/releases/download/v3.16.4/cmake-3.16.4-Linux-x86_64.tar.gz
    tar -xzvf cmake-3.16.4.tar.gz
    mv cmake-3.16.4-Linux-x86_64 cmake
    sudo update-alternatives --install /usr/bin/cmake cmake $HOME/DEV/cmake/bin/cmake 3164 --slave /usr/bin/ctest ctest $HOME/DEV/cmake/bin/ctest

    curl -L -o vcpkg-2020.01.zip https://github.com/microsoft/vcpkg/archive/2020.01.zip
    unzip vcpkg-2020.01.zip
    mv vcpkg-2020.01 vcpkg
    $HOME/DEV/vcpkg/bootstrap-vcpkg.sh
    sudo update-alternatives --install /usr/bin/vcpkg vcpkg $HOME/DEV/vcpkg/vcpkg 202001

    echo VCPKG_ROOT=$HOME/DEV/vcpkg >> $HOME/.bashrc
    source $HOME/.bashrc
    echo VCPKG_ROOT="$VCPKG_ROOT"
    vcpkg install --triplet x64-linux catch2 fmt date tl-expected
SHELL
end
